
#This file contains the instructions to set up Terraform on a local workstation.
#It looks like a shell script, but it should not be executed as one.
#Instead, this commands shall be executed manually
#  in a Linux terminal of the operator's workstation,
#  at most with aid of a copy-paste,
#  verifying the output and applying common sense in every moment.

#This file's porpouse is to serve as a reference for the operator,
#  in order to help him to set up the needed environment
#    smoothly and in a reproduceable fashion.
#It also allows to modify the environment setup easily
#  in case the requirements or procedures changes slightly.

#Ideally, this file shall be modified as the project develops,
#  reflecting all the changes
#  and stored in a verison control system, such as GIT.

#Beside serving as project's live documentation,
#  the ultimate goal of this file is to allow to re-create the project from 0
#  at any time.


####
# Set up initial Terraform configuration for an empty project
####

#CD to the project base directory before you continue

PROJECT="Alk-Netcracker Test Case"
MainPrefix="alkNC"

#Normally, the "global" configuration should go int
#  setups/aws_cloud/terraform/${MainPrefix}-999-global,
#  but since the project is small enough,
#  we may keep them all togther

mkdir -p setups/aws_cloud/terraform \
  && cd setups/aws_cloud/terraform

cat > ${MainPrefix}-aws0-config.tf << EOF
# This is a placeholder for AWS Cloud space for ${PROJECT}.
# Since the value of some of this parameters is a secret
#   Terraform should take them from environment variables
#   so they remain volatile,
#   istead of being stored in a plain file.

#Do not edit this file, without updating
#  alkNC-aws_cloud1 set up Terraform config.txt reference.

provider "aws" {
#  access_key = "XXXX"
#  secret_key = "YYYYY"
#  region     = "us-west-2"
}

EOF

#Initialize Terraform project
#  and make sure the needed provider plugins are in place

terraform init
#Should read:
#Initializing the backend...
#
#Initializing provider plugins...
#- Finding latest version of hashicorp/aws...
#- Installing hashicorp/aws v4.8.0...
#- Installed hashicorp/aws v4.8.0 (signed by HashiCorp)
# ...
#Terraform has been successfully initialized!
# ...

#2DO: Avoid downloading AWS provider binaries on-the-fly.
#  Do set them up manually, as a controlled procedure,
#  together with the rest of Terraofrm binaries



####
# Set up the main VPC in the selected region
####

#CD to the project base directory before you continue

#Make sure to have set the alias for "terraform" command
#and the environment variables for AWS provider:
#  export HISTCONTROL=ignorespace
#    export AWS_ACCESS_KEY_ID="put-key-here"
#    export AWS_SECRET_ACCESS_KEY="put-secret-here"
#    export AWS_DEFAULT_REGION="put-region-here"

PROJECT="Alk-Netcracker Test Case"
MainPrefix="alkNC"
MainVPC_NAME="${MainPrefix}-vpc"
MainVPC_CIDR="10.200.0.0/20"
MainRegion="us-east-1"
#MainDomain="aws-${MainRegion}.${MainPrefix}.i"
MainDomain="local"

mkdir -p setups/aws_cloud/terraform \
  && cd setups/aws_cloud/terraform

cat > ${MainPrefix}-aws0-initialVPC.tf << EOF

#Do not edit this file, without updating
#  alkNC-aws_cloud1 set up Terraform config.txt reference.

## Main VPC for "${PROJECT}" in AWS
resource "aws_vpc" "${MainVPC_NAME}" {
    cidr_block = "${MainVPC_CIDR}"
    enable_dns_hostnames = true
    enable_dns_support   = true
    instance_tenancy     = "default"
    tags = {
        Name = "${MainVPC_NAME}"
    }
}

#2DO: If the real domain name is coded into aws_route53_zone resource name
#  sustitute "." characters with something that won't spook Terraform.
#  Like "us-east-1.alkNC.i" -> "us-east-1-alkNC-i".

#resource "aws_route53_zone" "aws-${MainRegion}-${MainPrefix}-i-r53" {
resource "aws_route53_zone" "${MainPrefix}-${MainDomain}-r53" {
    name       = "${MainDomain}"
    comment    = "Private Hosted Zone for ${PROJECT} Project"
    vpc {
        vpc_id = "\${aws_vpc.${MainVPC_NAME}.id}"
    }
    tags = {
        Name = "${MainPrefix}-${MainDomain}-r53"
    }
}

## Default DHCP options set
resource "aws_vpc_dhcp_options" "${MainPrefix}-dhcpopt" {
  domain_name          = "${MainDomain}"
  domain_name_servers  = ["AmazonProvidedDNS"]
  tags = {
    Name = "${MainPrefix}-dhcpopt"
  }
}
resource "aws_vpc_dhcp_options_association" "${MainPrefix}-dhcpopt-assoc" {
  vpc_id          = "\${aws_vpc.${MainVPC_NAME}.id}"
  dhcp_options_id = "\${aws_vpc_dhcp_options.${MainPrefix}-dhcpopt.id}"
}

output "${MainVPC_NAME}" {
  value = "\${aws_vpc.${MainVPC_NAME}.id}"
}
output "${MainVPC_NAME}_cidr" {
  value = "\${aws_vpc.${MainVPC_NAME}.cidr_block}"
}
output "${MainPrefix}-${MainDomain}-r53" {
  value = "\${aws_route53_zone.${MainPrefix}-${MainDomain}-r53.id}"
}

EOF

terraform plan

terraform apply
#Do you want to perform these actions?
#  Terraform will perform the actions described above.
#  Only 'yes' will be accepted to approve.
#
#  Enter a value: yes


####
# Set up initial RSA keys for Linux-based EC2 instances
####

#CD to the project base directory before you continue

PROJECT="Alk-Netcracker Test Case"
MainPrefix="alkNC"


#2DO: Protect the key with a valid passphrase.

NOWDATETIME=$(date +%FT%H%M%S)
mkdir -p setups/aws_cloud/.secrets \
&& ssh-keygen \
  -f setups/aws_cloud/.secrets/${MainPrefix}-deployer-key_${NOWDATETIME} \
  -C "${MainPrefix}-deployer@aws_${NOWDATETIME}" \
  -N ''

cat setups/aws_cloud/.secrets/${MainPrefix}-deployer-key_${NOWDATETIME}.pub

NEWPUBKEY=$(cat setups/aws_cloud/.secrets/${MainPrefix}-deployer-key_${NOWDATETIME}.pub)

mkdir -p setups/aws_cloud/terraform/${MainPrefix}-999-global \
  && cd setups/aws_cloud/terraform/${MainPrefix}-999-global

cat > ${MainPrefix}-aws0-keys.tf << EOF

#Do not edit this file, without updating
#  alkNC-aws_cloud1 set up Terraform config.txt reference.

#This key will be used only on freshly deployed EC2 instances.
#It shall be disabled on a very early stage of any postinstall precodure,
#  and substituted by a personalized SysAdmin key,
#  out of the scope of Terraform orchestration.

resource "aws_key_pair" "${MainPrefix}-deployer-key" {
  key_name   = "${MainPrefix}-deployer-key"
  public_key = "${NEWPUBKEY}"
  tags = {
    Name = "${MainPrefix}-deployer-key"
  }
}

EOF


terraform plan

terraform apply
#Do you want to perform these actions?
#  Terraform will perform the actions described above.
#  Only 'yes' will be accepted to approve.
#
#  Enter a value: yes



# The rest of AWS Cloud setup for this project will be done via Terraform files,
#  stored in subdirectories under ./setups/aws_cloud/terraform/ path






